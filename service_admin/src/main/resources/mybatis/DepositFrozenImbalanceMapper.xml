<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qkwl.service.admin.bc.dao.DepositFrozenImbalanceMapper" >
  <resultMap id="BaseResultMap" type="com.qkwl.common.dto.capital.DepositFrozenImbalance" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="coin_id" property="coinId" jdbcType="INTEGER" />
    <result column="recharge_frozen" property="rechargeFrozen" jdbcType="DECIMAL" />
    <result column="otc_transfer_in" property="otcTransferIn" jdbcType="DECIMAL" />
    <result column="trade_unfreeze" property="tradeUnfreeze" jdbcType="DECIMAL" />
    <result column="wallet_deposit_frozen" property="walletDepositFrozen" jdbcType="DECIMAL" />
    <result column="wallet_deposit_frozen_total" property="walletDepositFrozenTotal" jdbcType="DECIMAL" />
    <result column="deposit_unfrozen" property="depositUnfrozen" jdbcType="DECIMAL" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    deposit_frozen_imbalance.id, deposit_frozen_imbalance.user_id, deposit_frozen_imbalance.coin_id, deposit_frozen_imbalance.recharge_frozen,
     deposit_frozen_imbalance.otc_transfer_in, deposit_frozen_imbalance.trade_unfreeze, deposit_frozen_imbalance.wallet_deposit_frozen, 
    deposit_frozen_imbalance.wallet_deposit_frozen_total, deposit_frozen_imbalance.create_time,deposit_unfrozen
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from deposit_frozen_imbalance
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  
  <select id="selectByUserAndCoin" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from deposit_frozen_imbalance
    where user_id = #{userId,jdbcType=INTEGER}
    and coin_id = #{coinId,jdbcType=INTEGER}
  </select>
  
  <select id="selectByParam" resultMap="BaseResultMap" parameterType="com.qkwl.common.dto.capital.DepositFrozenImbalance" >
    select 
    <include refid="Base_Column_List" />
    from deposit_frozen_imbalance
    where 1=1
    <if test="userId != null" >
        and user_id = #{userId,jdbcType=INTEGER}
    </if> 
    <if test="coinId != null" >
        and coin_id = #{coinId,jdbcType=INTEGER}
    </if> 
  </select>
  
  
  
  
  <delete id="deleteByUserAndCoin" parameterType="java.lang.Integer" >
    delete from deposit_frozen_imbalance
     where user_id = #{userId,jdbcType=INTEGER}
    and coin_id = #{coinId,jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from deposit_frozen_imbalance
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qkwl.common.dto.capital.DepositFrozenImbalance" >
    insert into deposit_frozen_imbalance (id, user_id, coin_id, 
      recharge_frozen, otc_transfer_in, trade_unfreeze, 
      wallet_deposit_frozen, wallet_deposit_frozen_total, 
      create_time,deposit_unfrozen)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{coinId,jdbcType=INTEGER}, 
      #{rechargeFrozen,jdbcType=DECIMAL}, #{otcTransferIn,jdbcType=DECIMAL}, #{tradeUnfreeze,jdbcType=DECIMAL}, 
      #{walletDepositFrozen,jdbcType=DECIMAL}, #{walletDepositFrozenTotal,jdbcType=DECIMAL}, 
      #{createTime,jdbcType=TIMESTAMP},#{depositUnfrozen,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.qkwl.common.dto.capital.DepositFrozenImbalance" >
    insert into deposit_frozen_imbalance
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="coinId != null" >
        coin_id,
      </if>
      <if test="rechargeFrozen != null" >
        recharge_frozen,
      </if>
      <if test="otcTransferIn != null" >
        otc_transfer_in,
      </if>
      <if test="tradeUnfreeze != null" >
        trade_unfreeze,
      </if>
      <if test="walletDepositFrozen != null" >
        wallet_deposit_frozen,
      </if>
      <if test="walletDepositFrozenTotal != null" >
        wallet_deposit_frozen_total,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="coinId != null" >
        #{coinId,jdbcType=INTEGER},
      </if>
      <if test="rechargeFrozen != null" >
        #{rechargeFrozen,jdbcType=DECIMAL},
      </if>
      <if test="otcTransferIn != null" >
        #{otcTransferIn,jdbcType=DECIMAL},
      </if>
      <if test="tradeUnfreeze != null" >
        #{tradeUnfreeze,jdbcType=DECIMAL},
      </if>
      <if test="walletDepositFrozen != null" >
        #{walletDepositFrozen,jdbcType=DECIMAL},
      </if>
      <if test="walletDepositFrozenTotal != null" >
        #{walletDepositFrozenTotal,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qkwl.common.dto.capital.DepositFrozenImbalance" >
    update deposit_frozen_imbalance
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="coinId != null" >
        coin_id = #{coinId,jdbcType=INTEGER},
      </if>
      <if test="rechargeFrozen != null" >
        recharge_frozen = #{rechargeFrozen,jdbcType=DECIMAL},
      </if>
      <if test="otcTransferIn != null" >
        otc_transfer_in = #{otcTransferIn,jdbcType=DECIMAL},
      </if>
      <if test="tradeUnfreeze != null" >
        trade_unfreeze = #{tradeUnfreeze,jdbcType=DECIMAL},
      </if>
      <if test="walletDepositFrozen != null" >
        wallet_deposit_frozen = #{walletDepositFrozen,jdbcType=DECIMAL},
      </if>
      <if test="walletDepositFrozenTotal != null" >
        wallet_deposit_frozen_total = #{walletDepositFrozenTotal,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qkwl.common.dto.capital.DepositFrozenImbalance" >
    update deposit_frozen_imbalance
    set user_id = #{userId,jdbcType=INTEGER},
      coin_id = #{coinId,jdbcType=INTEGER},
      recharge_frozen = #{rechargeFrozen,jdbcType=DECIMAL},
      otc_transfer_in = #{otcTransferIn,jdbcType=DECIMAL},
      trade_unfreeze = #{tradeUnfreeze,jdbcType=DECIMAL},
      wallet_deposit_frozen = #{walletDepositFrozen,jdbcType=DECIMAL},
      deposit_unfrozen = #{depositUnfrozen,jdbcType=DECIMAL},
      wallet_deposit_frozen_total = #{walletDepositFrozenTotal,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>