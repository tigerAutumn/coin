<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qkwl.service.admin.bc.dao.OtcUserTransferMapper" >
  <resultMap id="BaseResultMap" type="com.qkwl.common.dto.otc.OtcUserTransfer" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="coin_id" property="coinId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="version" property="version" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, coin_id, user_id, create_time, amount, type, version
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user_otc_transfer
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  
  <select id="sumOtcTransfer" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
      ifnull(sum(amount),0) as amount,coin_id,type
    from user_otc_transfer
    where user_id = #{userId,jdbcType=INTEGER}
    <if test="typeList != null" >
    	and type in 
    	<foreach collection="typeList" item="item" open="(" separator="," close=")">
				#{item}
		</foreach>
    </if>
    group by coin_id,type
  </select>
  
  <select id="sumOtcTransferBalance" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
      ifnull(sum(amount),0) as amount,coin_id,type,ifnull(sum(fee),0) as fee
    from user_otc_transfer
    where user_id = #{userId,jdbcType=INTEGER} and type = #{type,jdbcType=INTEGER} and coin_id = #{coinId,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_otc_transfer
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qkwl.common.dto.otc.OtcUserTransfer" >
    insert into user_otc_transfer (id, coin_id, user_id, 
      create_time, amount, type, 
      version)
    values (#{id,jdbcType=INTEGER}, #{coinId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{amount,jdbcType=DECIMAL}, #{type,jdbcType=INTEGER}, 
      #{version,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.qkwl.common.dto.otc.OtcUserTransfer" >
    insert into user_otc_transfer
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="coinId != null" >
        coin_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="version != null" >
        version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="coinId != null" >
        #{coinId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qkwl.common.dto.otc.OtcUserTransfer" >
    update user_otc_transfer
    <set >
      <if test="coinId != null" >
        coin_id = #{coinId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qkwl.common.dto.otc.OtcUserTransfer" >
    update user_otc_transfer
    set coin_id = #{coinId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      amount = #{amount,jdbcType=DECIMAL},
      type = #{type,jdbcType=INTEGER},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="countOtcTransferByParam" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*)
	      from user_otc_transfer
	      where type in (1,2,5) 
	      	and coin_id = #{coinId}
            <if test="startTime != null and startTime != ''">
				and create_time &gt;= #{startTime}
            </if>
            <if test="endTime != null and endTime != ''">
				and create_time &lt; #{endTime}
			</if>
    </select>
    
	<select id="selectOtcTransferList" resultType="OtcUserTransfer" parameterType="java.util.Map">
	  select o.id, o.user_id, c.short_name coinName, o.type, o.amount, o.create_time
	    from user_otc_transfer o, system_coin_type c
	    where o.coin_id = c.id
	    	and o.type in (1,2,5) 
	    	and o.coin_id = #{coinId}
	    	<if test="startTime != null and startTime != ''">
				and o.create_time &gt;= #{startTime}
            </if>
            <if test="endTime != null and endTime != ''">
				and o.create_time &lt; #{endTime}
			</if>
	        limit #{offset},#{limit}
    </select>
    
    <select id="selectTransferOutAmount" resultType="OtcUserTransfer" parameterType="java.util.Map">
	  select sum(o.amount) amount, c.short_name coinName
	    from user_otc_transfer o, system_coin_type c
	    where o.coin_id = c.id
	    	and o.type in (2,5)
	    	<if test="startTime != null and startTime != ''">
				and o.create_time &gt;= #{startTime}
            </if>
            <if test="endTime != null and endTime != ''">
				and o.create_time &lt; #{endTime}
			</if>
			group by o.coin_id
    </select>
    
    <select id="selectTransferInAmount" resultType="OtcUserTransfer" parameterType="java.util.Map">
	  select sum(o.amount) amount, c.short_name coinName
	    from user_otc_transfer o, system_coin_type c
	    where o.coin_id = c.id
	    	and o.type = 1
	    	<if test="startTime != null and startTime != ''">
				and o.create_time &gt;= #{startTime}
            </if>
            <if test="endTime != null and endTime != ''">
				and o.create_time &lt; #{endTime}
			</if>
			group by o.coin_id
    </select>
</mapper>