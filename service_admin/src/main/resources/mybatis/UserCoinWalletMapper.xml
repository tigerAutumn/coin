<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qkwl.service.admin.bc.dao.UserCoinWalletMapper">

  <sql id="userCoinWalletColumn">id, uid, coin_id, total, frozen, borrow,ico, gmt_create, gmt_modified, deposit_frozen , deposit_frozen_total,version</sql>

  <insert id="insert" parameterType="UserCoinWallet" >
    insert into user_coin_wallet (
    uid, coin_id, total, frozen, borrow,ico,
    gmt_create, gmt_modified,deposit_frozen,deposit_frozen_total)
    values (
    #{uid,jdbcType=INTEGER}, #{coinId,jdbcType=INTEGER},
    #{total,jdbcType=DECIMAL}, #{frozen,jdbcType=DECIMAL}, #{borrow,jdbcType=DECIMAL}, #{ico,jdbcType=DECIMAL},
    #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP},#{depositFrozen,jdbcType=DECIMAL} , #{depositFrozenTotal,jdbcType=DECIMAL}
    )
  </insert>
  
  <insert id="insertBatch" parameterType="java.util.List">
    insert into user_coin_wallet (
    uid, coin_id, total, frozen, borrow,ico,
    gmt_create, gmt_modified,deposit_frozen,deposit_frozen_total)
    values 
        <foreach collection="list" item="item" index="index" separator="," >
            (
            #{item.uid,jdbcType=INTEGER}, 
            #{item.coinId,jdbcType=INTEGER},
            #{item.total,jdbcType=DECIMAL}, 
            #{item.frozen,jdbcType=DECIMAL}, 
            #{item.borrow,jdbcType=DECIMAL}, 
            #{item.ico,jdbcType=DECIMAL},
            #{item.gmtCreate,jdbcType=TIMESTAMP}, 
            #{item.gmtModified,jdbcType=TIMESTAMP},
            #{item.depositFrozen,jdbcType=DECIMAL} , 
            #{item.depositFrozenTotal,jdbcType=DECIMAL}
            )
        </foreach>
  </insert>
  
  
  
  
  

  <update id="updateByPrimaryKey" parameterType="UserCoinWallet">
    update user_coin_wallet
    set <!-- uid = #{uid,jdbcType=INTEGER}, 
      coin_id = #{coinId,jdbcType=INTEGER},-->
      total = #{total,jdbcType=DECIMAL},
      frozen = #{frozen,jdbcType=DECIMAL},
      borrow = #{borrow,jdbcType=DECIMAL},
      ico = #{ico,jdbcType=DECIMAL},
      deposit_frozen = #{depositFrozen,jdbcType=DECIMAL},
      deposit_frozen_total = #{depositFrozenTotal,jdbcType=DECIMAL},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      version = if( version + 1> 9999999999999999,0, version +1) 
    where id = #{id,jdbcType=INTEGER} and version = #{version,jdbcType=BIGINT}
  </update>
  
  <select id="selectByUidAndCoin" resultType="UserCoinWallet">
    select <include refid="userCoinWalletColumn" />
    from user_coin_wallet
    where uid = #{uid} and coin_id = #{coinId}
  </select>
  
  <select id="selectByUid" resultType="UserCoinWallet">
    select <include refid="userCoinWalletColumn" />
    from user_coin_wallet
    where uid = #{uid}
  </select>
  
  <select id="selectUnfreezenByCoinId" resultType="UserCoinWallet">
    select <include refid="userCoinWalletColumn" />
    from user_coin_wallet
    where coin_id = #{coinId}
      and deposit_frozen != 0
  </select>
  
  <select id="selectByUidAndCoinLock" resultType="UserCoinWallet">
    select <include refid="userCoinWalletColumn" />
    from user_coin_wallet
    where uid = #{uid} and coin_id = #{coinId} 
  </select>

  <resultMap id="allInfo" type="java.util.Map">
    <result column="sum(total)" property="total" jdbcType="DECIMAL" />
    <result column="sum(frozen)" property="frozen" jdbcType="DECIMAL" />
  </resultMap>

  <select id="selectSum" resultMap="allInfo" parameterType="java.lang.Integer">
    select sum(total), sum(frozen) from user_coin_wallet where coin_id = #{coinid}
  </select>
  
  <select id="selectCount" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    select count(*) from user_coin_wallet where coin_id = #{coinid} 
  </select>


  <select id="getAdminPageList" resultType="UserCoinWallet" parameterType="java.util.Map">
    select
    user_coin_wallet.id,
    user_coin_wallet.uid,
    user_coin_wallet.total,
    user_coin_wallet.frozen,
    user_coin_wallet.borrow,
    user_coin_wallet.ico,
    user_coin_wallet.deposit_frozen,
    user_coin_wallet.deposit_frozen_total,
    user_coin_wallet.gmt_modified,
    user_coin_wallet.coin_id,
    f_user.floginname loginName,
    f_user.fnickname nickName,
    f_user.frealname realName,
    system_coin_type.name coinName,
    system_coin_type.short_name shortName
    from
    <choose>
 		<when test="keyword != null or fuids != null">
 			(select fid,floginname,fnickname,frealname from f_user where  1=1
 			<if test="fuids != null">
			     	and fid  in
			      <foreach collection="fuids" item="item" open="(" separator="," close=")">
			         #{item}
			      </foreach>
			 </if>
			 <if test="keyword != null">
	 			and (f_user.floginname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
			      f_user.fnickname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
			      f_user.frealname like concat('%',#{keyword,jdbcType=VARCHAR},'%')
				)
			</if>
			) f_user,user_coin_wallet,system_coin_type
			 where 1=1 and f_user.fid = user_coin_wallet.uid and system_coin_type.id = user_coin_wallet.coin_id
			 <if test="coinId != null">
		      and user_coin_wallet.coin_id = ${coinId}
		    </if>
 		</when>
 		<otherwise>
 			(select user_coin_wallet.id,
                    user_coin_wallet.uid,
                    user_coin_wallet.total,
                    user_coin_wallet.frozen,
                    user_coin_wallet.borrow,
                    user_coin_wallet.ico,
                    user_coin_wallet.gmt_modified,
                    user_coin_wallet.deposit_frozen,
    				user_coin_wallet.deposit_frozen_total,
                    user_coin_wallet.coin_id from user_coin_wallet where 1=1
                    <if test="coinId != null">
				      and user_coin_wallet.coin_id = ${coinId}
				    </if>
			) user_coin_wallet,f_user ,	system_coin_type 
			where 1=1 
				and	f_user.fid = user_coin_wallet.uid 
				and system_coin_type.id = user_coin_wallet.coin_id
 		</otherwise>
 	</choose>  
    <if test="orderField != null">
      order by user_coin_wallet.${orderField} ${orderDirection}
    </if>
    limit #{offset},#{limit}
  </select>
  
  <select id="getImportAdminPageList" resultType="UserCoinWallet" parameterType="java.util.Map">
    select
    user_coin_wallet.id,
    user_coin_wallet.uid,
    user_coin_wallet.total,
    user_coin_wallet.frozen,
    user_coin_wallet.borrow,
    user_coin_wallet.ico,
    user_coin_wallet.deposit_frozen,
    user_coin_wallet.deposit_frozen_total,
    user_coin_wallet.gmt_modified,
    user_coin_wallet.coin_id,
    f_user.floginname loginName,
    f_user.fnickname nickName,
    f_user.frealname realName,
    system_coin_type.name coinName
    from
    <choose>
 		<when test="keyword != null or fuids != null">
 			(select fid,floginname,fnickname,frealname from f_user where  1=1
 			<if test="fuids != null">
			     	and fid  in
			      <foreach collection="fuids" item="item" open="(" separator="," close=")">
			         #{item}
			      </foreach>
			 </if>
			 <if test="keyword != null">
	 			and (f_user.floginname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
			      f_user.fnickname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
			      f_user.frealname like concat('%',#{keyword,jdbcType=VARCHAR},'%')
				)
			</if>
			) f_user,user_coin_wallet,system_coin_type
			 where 1=1 and f_user.fid = user_coin_wallet.uid and system_coin_type.id = user_coin_wallet.coin_id
			 	and (user_coin_wallet.total != 0 or user_coin_wallet.frozen != 0)
			 <if test="coinId != null">
		      and user_coin_wallet.coin_id = ${coinId}
		    </if>
 		</when>
 		<otherwise>
 			(select user_coin_wallet.id,
                    user_coin_wallet.uid,
                    user_coin_wallet.total,
                    user_coin_wallet.frozen,
                    user_coin_wallet.borrow,
                    user_coin_wallet.ico,
                    user_coin_wallet.gmt_modified,
                    user_coin_wallet.deposit_frozen,
    				user_coin_wallet.deposit_frozen_total,
                    user_coin_wallet.coin_id from user_coin_wallet where 1=1
                    <if test="coinId != null">
				      and user_coin_wallet.coin_id = ${coinId}
				    </if>
			) user_coin_wallet,f_user ,	system_coin_type 
			where 1=1 and (user_coin_wallet.total != 0 or user_coin_wallet.frozen != 0 or user_coin_wallet.borrow!=0 or user_coin_wallet.deposit_frozen!=0)
				and	f_user.fid = user_coin_wallet.uid 
				and system_coin_type.id = user_coin_wallet.coin_id
 		</otherwise>
 	</choose>  
    order by user_coin_wallet.total desc
    limit #{offset},#{limit}
  </select>

  <select id="countAdminPage" resultType="int" parameterType="java.util.Map">
    select
    count(*)
    from
	<choose>
 		<when test="keyword != null">
 			(select fid,floginname,fnickname,frealname from f_user where 
 			<if test="fuids != null">
			     	 fid  in
			      <foreach collection="fuids" item="item" open="(" separator="," close=")">
			         #{item}
			      </foreach>
			      and
			 </if>
 			(f_user.floginname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
		      f_user.fnickname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
		      f_user.frealname like concat('%',#{keyword,jdbcType=VARCHAR},'%')
			)) f_user,user_coin_wallet 
			 where f_user.fid = user_coin_wallet.uid
 		</when>
 		<otherwise>
 			user_coin_wallet where 1=1
 			<if test="fuids != null">
		      and user_coin_wallet.uid in
		      <foreach collection="fuids" item="item" open="(" separator="," close=")">
		        #{item}
		      </foreach>
		    </if>
 		</otherwise>
 	</choose>  
    <if test="coinId != null">
      and user_coin_wallet.coin_id = ${coinId}
    </if>
  </select>
  
  <select id="countImportAdminPage" resultType="int" parameterType="java.util.Map">
    select
    count(*)
    from
	<choose>
 		<when test="keyword != null">
 			(select fid,floginname,fnickname,frealname from f_user where 
 			<if test="fuids != null">
			     	 fid  in
			      <foreach collection="fuids" item="item" open="(" separator="," close=")">
			         #{item}
			      </foreach>
			      and
			 </if>
 			(f_user.floginname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
		      f_user.fnickname like concat('%',#{keyword,jdbcType=VARCHAR},'%') or
		      f_user.frealname like concat('%',#{keyword,jdbcType=VARCHAR},'%')
			)) f_user,user_coin_wallet 
			 where f_user.fid = user_coin_wallet.uid and (user_coin_wallet.total != 0 or user_coin_wallet.frozen != 0)
 		</when>
 		<otherwise>
 			user_coin_wallet where 1=1 and (user_coin_wallet.total != 0 or user_coin_wallet.frozen != 0)
 			<if test="fuids != null">
		      and user_coin_wallet.uid in
		      <foreach collection="fuids" item="item" open="(" separator="," close=")">
		        #{item}
		      </foreach>
		    </if>
 		</otherwise>
 	</choose>  
    <if test="coinId != null">
      and user_coin_wallet.coin_id = ${coinId}
    </if>
  </select>


  <select id="selectExistCoinWallet" resultType="UserCoinWallet" parameterType="java.lang.Integer">
    select <include refid="userCoinWalletColumn" />
    from user_coin_wallet
    where
    coin_id = #{coinid}
    and
    <![CDATA[ (total > 0 or frozen > 0 or borrow > 0) ]]>
    
  </select>

  <select id="listWalletCapitalBalanceDTOByUids" resultType="WalletCapitalBalanceDTO" parameterType="java.util.Map">
    SELECT *,(result-total) diff FROM(
    SELECT temp0.fid fuid,
    ifnull(rechargeRMB, 0)+
    ifnull(rechargeRMBWork, 0)+
    ifnull(rewardRMB, 0)-
    ifnull(withdrawRMB, 0)-
    ifnull(icoRMB, 0)+
    ifnull(send_amount, 0)-
    ifnull(vip6, 0)+
    ifnull(hissellamount, 0)+
    ifnull(cursellamount, 0)+
    IFNULL(pushinfamount,0)+
    ifnull(transferAmount,0)-
    IFNULL(pushoutfamount,0)-
    ifnull(hisbuyamount, 0)-
    ifnull(curbuyamount, 0)-
    ifnull(hissellffees, 0)-
    ifnull(cursellffees, 0)+
    ifnull(activityAmount,0)+
    ifnull(zsjfAmount,0)  result,
    total

    FROM f_user temp0
    LEFT JOIN(
    SELECT fuid,ifnull(sum(ifnull(famount, 0) + ifnull(ffees, 0)),0) rechargeRMB
    FROM f_wallet_capital_operation
    WHERE	fstatus = 3 AND finouttype = 1
    GROUP BY fuid) temp1 ON temp0.fid=temp1.fuid
    LEFT JOIN(
    SELECT fuid,ifnull(sum(ifnull(famount, 0) + ifnull(ffees, 0)),0) withdrawRMB
    FROM f_wallet_capital_operation
    WHERE	fstatus = 3 AND finouttype = 2
    GROUP BY fuid) temp2 ON temp0.fid=temp2.fuid
    LEFT JOIN(
    SELECT fuid,ifnull(sum(famount), 0) rechargeRMBWork
    FROM	f_log_console_virtual_recharge
    WHERE	fstatus = 2 and fcoinid=${coinId}
    GROUP BY fuid) temp3 ON temp0.fid=temp3.fuid
    LEFT JOIN(
    SELECT	fuid,ifnull(sum(famount), 0) rewardRMB
    FROM	f_reward_code
    WHERE	fstate = 1 AND ftype = 0
    GROUP BY fuid) temp4 ON temp0.fid=temp4.fuid
    LEFT JOIN(
    SELECT fuid,ifnull(sum(fcny), 0) icoRMB
    FROM	f_ico_record
    GROUP BY fuid) temp5 ON temp0.fid=temp5.fuid
    LEFT JOIN(
    SELECT	fuid,	(	CASE WHEN flevel = 6 THEN	3888	ELSE	0	END	) vip6
    FROM	f_user_score
    GROUP BY fuid) temp6 ON temp0.fid=temp6.fuid
    LEFT JOIN(
    select fuid,ifnull(sum(fsuccessamount), 0) hisbuyamount
    from 	f_entrust_history
    where fstatus in (2,3,5)  and ftype =0
    GROUP BY fuid) temp7 ON temp0.fid=temp7.fuid
    LEFT JOIN(
    select fuid,ifnull(sum(fsuccessamount), 0) hissellamount,ifnull(sum(ffees), 0) hissellffees
    from 	f_entrust_history
    where fstatus in (2,3,5)  and ftype =1
    GROUP BY fuid) temp8 ON temp0.fid=temp8.fuid
    LEFT JOIN(
    select fuid,ifnull(sum(fsuccessamount), 0) curbuyamount
    from 	f_entrust
    where fstatus in (2,3,5)  and ftype =0
    GROUP BY fuid) temp9 ON temp0.fid=temp9.fuid
    LEFT JOIN(
    select fuid,ifnull(sum(fsuccessamount), 0) cursellamount,ifnull(sum(ffees), 0) cursellffees
    from 	f_entrust
    where fstatus in (2,3,5)  and ftype =1
    GROUP BY fuid) temp10 ON temp0.fid=temp10.fuid
    LEFT JOIN(
    select fuid,sum(fcount) pushoutfcount,sum(famount) pushinfamount from f_user_push
    where f_user_push.fstate = 2
    GROUP BY fuid) temp11 ON temp0.fshowid=temp11.fuid
    LEFT JOIN(
    select fpushuid,sum(fcount) pushinfcount,sum(famount) pushoutfamount from f_user_push
    where f_user_push.fstate = 2
    GROUP BY fpushuid) temp12 ON temp0.fshowid=temp12.fpushuid
    LEFT JOIN(
    SELECT sum(pay_amount) pay_amount,uid FROM ico_record
    where pay_coin_id = ${coinId}
    GROUP BY uid) temp13 ON temp0.fid=temp13.uid
    LEFT JOIN(
    SELECT sum(send_amount) send_amount,uid FROM ico_record
    LEFT JOIN ico_info ON ico_info.id = ico_record.ico_id
    WHERE ico_info.ico_coin_id = ${coinId}
    GROUP BY uid) temp14 ON temp0.fid=temp14.uid
    LEFT JOIN(
    select ifnull(sum(famount), 0) transferAmount,fuid
    from f_log_capital_transfer
    where fstatus = 1 AND fcoinid = ${coinId}
    GROUP BY fuid) temp15 ON temp0.fid=temp15.fuid
    LEFT JOIN(
    select ifnull(sum(famount), 0) activityAmount,fuid
    from `f_activity_record`
    where fstate = 2 AND fcoinid = ${coinId}
    GROUP BY fuid) temp16 ON temp0.fid=temp16.fuid
    LEFT JOIN(
    select ifnull(sum(amount), 0) zsjfAmount,uid
    from `wallet_zsjf_capital_operation_recharge`
    where (`status` = 1 or `status` = 4) AND coin_id = ${coinId}
    GROUP BY uid) temp17 ON temp0.fid=temp17.uid
    LEFT JOIN(
    SELECT uid,(total+frozen) total FROM user_coin_wallet where coin_id=${coinId}
    ) temp50 ON temp0.fid=temp50.uid
    WHERE 1 = 1
    <if test="uids != null">
      AND temp0.fid IN
      <foreach collection="uids" item="item" open="(" separator="," close=")">
        ${item}
      </foreach>
    </if>
    ) temp
  </select>
  
  <insert id="snapshotWallet" parameterType="Airdrop" >
    insert into user_coin_wallet_snapshot 
    (wallet_id, uid, coin_id, total, frozen, borrow,ico,
    gmt_create, gmt_modified, airdrop_id, snapshot_time)
    select id, uid, coin_id, total, frozen, borrow,ico, gmt_create, gmt_modified, #{id}, NOW() from user_coin_wallet where coin_id = #{coinId};
  </insert>
  
  
  <select id="countUidByCoinId" resultType="java.lang.Integer">
  select count(id) from user_coin_wallet where coin_id=#{coinId}
  </select>
  
  
  <select id="findAllUidByCoinId" resultType="java.lang.Integer">
   select uid from user_coin_wallet where coin_id=#{coinId}
  </select>
  
  <update id="updateUnBorrowCAS">
	update user_coin_wallet set
		total = total + #{borrow,jdbcType=DECIMAL},
		borrow = borrow - #{borrow,jdbcType=DECIMAL},
		gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
		version =if(version+1> 9999999999999999,0,version+1)
	where id = #{id,jdbcType=INTEGER} and version=#{version,jdbcType = INTEGER}
  </update>
  
	<select id="select" resultType="UserCoinWallet">
	    select <include refid="userCoinWalletColumn" /> from user_coin_wallet where uid = #{uid} and coin_id = #{coinId}
	</select>
</mapper>